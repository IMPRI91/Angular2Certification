{
  "version": 3,
  "sources": ["../../../../../node_modules/msw/lib/core/utils/toResponseInit.mjs", "../../../../../node_modules/msw/lib/core/utils/internal/isObject.mjs", "../../../../../node_modules/msw/lib/core/utils/internal/mergeRight.mjs", "../../../../../node_modules/@open-draft/deferred-promise/build/index.mjs", "../../../../../node_modules/@mswjs/interceptors/lib/browser/chunk-KK6APRON.mjs", "../../../../../node_modules/@mswjs/interceptors/lib/browser/chunk-KRADPSOF.mjs", "../../../../../node_modules/@mswjs/interceptors/lib/browser/chunk-XILA3UPG.mjs", "../../../../../node_modules/msw/lib/browser/index.mjs"],
  "sourcesContent": ["function toResponseInit(response) {\r\n  return {\r\n    status: response.status,\r\n    statusText: response.statusText,\r\n    headers: Object.fromEntries(response.headers.entries())\r\n  };\r\n}\r\nexport {\r\n  toResponseInit\r\n};\r\n", "function isObject(value) {\r\n  return value != null && typeof value === \"object\" && !Array.isArray(value);\r\n}\r\nexport {\r\n  isObject\r\n};\r\n", "import { isObject } from './isObject.mjs';\r\nfunction mergeRight(left, right) {\r\n  return Object.entries(right).reduce((result, [key, rightValue]) => {\r\n    const leftValue = result[key];\r\n    if (Array.isArray(leftValue) && Array.isArray(rightValue)) {\r\n      result[key] = leftValue.concat(rightValue);\r\n      return result;\r\n    }\r\n    if (isObject(leftValue) && isObject(rightValue)) {\r\n      result[key] = mergeRight(leftValue, rightValue);\r\n      return result;\r\n    }\r\n    result[key] = rightValue;\r\n    return result;\r\n  }, Object.assign({}, left));\r\n}\r\nexport {\r\n  mergeRight\r\n};\r\n", "// src/createDeferredExecutor.ts\r\nfunction createDeferredExecutor() {\r\n  const executor = (resolve, reject) => {\r\n    executor.state = \"pending\";\r\n    executor.resolve = (data) => {\r\n      if (executor.state !== \"pending\") {\r\n        return;\r\n      }\r\n      executor.result = data;\r\n      const onFulfilled = (value) => {\r\n        executor.state = \"fulfilled\";\r\n        return value;\r\n      };\r\n      return resolve(\r\n        data instanceof Promise ? data : Promise.resolve(data).then(onFulfilled)\r\n      );\r\n    };\r\n    executor.reject = (reason) => {\r\n      if (executor.state !== \"pending\") {\r\n        return;\r\n      }\r\n      queueMicrotask(() => {\r\n        executor.state = \"rejected\";\r\n      });\r\n      return reject(executor.rejectionReason = reason);\r\n    };\r\n  };\r\n  return executor;\r\n}\r\n\r\n// src/DeferredPromise.ts\r\nvar DeferredPromise = class extends Promise {\r\n  #executor;\r\n  resolve;\r\n  reject;\r\n  constructor(executor = null) {\r\n    const deferredExecutor = createDeferredExecutor();\r\n    super((originalResolve, originalReject) => {\r\n      deferredExecutor(originalResolve, originalReject);\r\n      executor?.(deferredExecutor.resolve, deferredExecutor.reject);\r\n    });\r\n    this.#executor = deferredExecutor;\r\n    this.resolve = this.#executor.resolve;\r\n    this.reject = this.#executor.reject;\r\n  }\r\n  get state() {\r\n    return this.#executor.state;\r\n  }\r\n  get rejectionReason() {\r\n    return this.#executor.rejectionReason;\r\n  }\r\n  then(onFulfilled, onRejected) {\r\n    return this.#decorate(super.then(onFulfilled, onRejected));\r\n  }\r\n  catch(onRejected) {\r\n    return this.#decorate(super.catch(onRejected));\r\n  }\r\n  finally(onfinally) {\r\n    return this.#decorate(super.finally(onfinally));\r\n  }\r\n  #decorate(promise) {\r\n    return Object.defineProperties(promise, {\r\n      resolve: { configurable: true, value: this.resolve },\r\n      reject: { configurable: true, value: this.reject }\r\n    });\r\n  }\r\n};\r\nexport {\r\n  DeferredPromise,\r\n  createDeferredExecutor\r\n};\r\n", "// src/utils/uuid.ts\r\nfunction uuidv4() {\r\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\r\n    const r = Math.random() * 16 | 0;\r\n    const v = c == \"x\" ? r : r & 3 | 8;\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\n// src/utils/RequestController.ts\r\nimport { invariant } from \"outvariant\";\r\nimport { DeferredPromise } from \"@open-draft/deferred-promise\";\r\nvar RequestController = class {\r\n  constructor(request) {\r\n    this.request = request;\r\n    this.responsePromise = new DeferredPromise();\r\n  }\r\n  respondWith(response) {\r\n    invariant(\r\n      this.responsePromise.state === \"pending\",\r\n      'Failed to respond to \"%s %s\" request: the \"request\" event has already been responded to.',\r\n      this.request.method,\r\n      this.request.url\r\n    );\r\n    this.responsePromise.resolve(response);\r\n  }\r\n};\r\n\r\n// src/utils/toInteractiveRequest.ts\r\nfunction toInteractiveRequest(request) {\r\n  const requestController = new RequestController(request);\r\n  Reflect.set(\r\n    request,\r\n    \"respondWith\",\r\n    requestController.respondWith.bind(requestController)\r\n  );\r\n  return {\r\n    interactiveRequest: request,\r\n    requestController\r\n  };\r\n}\r\n\r\n// src/utils/emitAsync.ts\r\nasync function emitAsync(emitter, eventName, ...data) {\r\n  const listners = emitter.listeners(eventName);\r\n  if (listners.length === 0) {\r\n    return;\r\n  }\r\n  for (const listener of listners) {\r\n    await listener.apply(emitter, data);\r\n  }\r\n}\r\n\r\nexport {\r\n  uuidv4,\r\n  toInteractiveRequest,\r\n  emitAsync\r\n};\r\n", "import {\r\n  emitAsync,\r\n  toInteractiveRequest,\r\n  uuidv4\r\n} from \"./chunk-KK6APRON.mjs\";\r\nimport {\r\n  IS_PATCHED_MODULE,\r\n  Interceptor\r\n} from \"./chunk-S72SKXXQ.mjs\";\r\n\r\n// src/interceptors/fetch/index.ts\r\nimport { invariant } from \"outvariant\";\r\nimport { DeferredPromise } from \"@open-draft/deferred-promise\";\r\nimport { until } from \"@open-draft/until\";\r\n\r\n// src/utils/isPropertyAccessible.ts\r\nfunction isPropertyAccessible(obj, key) {\r\n  try {\r\n    obj[key];\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n\r\n// src/interceptors/fetch/index.ts\r\nvar _FetchInterceptor = class extends Interceptor {\r\n  constructor() {\r\n    super(_FetchInterceptor.symbol);\r\n  }\r\n  checkEnvironment() {\r\n    return typeof globalThis !== \"undefined\" && typeof globalThis.fetch !== \"undefined\";\r\n  }\r\n  setup() {\r\n    const pureFetch = globalThis.fetch;\r\n    invariant(\r\n      !pureFetch[IS_PATCHED_MODULE],\r\n      'Failed to patch the \"fetch\" module: already patched.'\r\n    );\r\n    globalThis.fetch = async (input, init) => {\r\n      var _a;\r\n      const requestId = uuidv4();\r\n      const request = new Request(input, init);\r\n      this.logger.info(\"[%s] %s\", request.method, request.url);\r\n      const { interactiveRequest, requestController } = toInteractiveRequest(request);\r\n      this.logger.info(\r\n        'emitting the \"request\" event for %d listener(s)...',\r\n        this.emitter.listenerCount(\"request\")\r\n      );\r\n      this.emitter.once(\"request\", ({ requestId: pendingRequestId }) => {\r\n        if (pendingRequestId !== requestId) {\r\n          return;\r\n        }\r\n        if (requestController.responsePromise.state === \"pending\") {\r\n          requestController.responsePromise.resolve(void 0);\r\n        }\r\n      });\r\n      this.logger.info(\"awaiting for the mocked response...\");\r\n      const signal = interactiveRequest.signal;\r\n      const requestAborted = new DeferredPromise();\r\n      signal.addEventListener(\r\n        \"abort\",\r\n        () => {\r\n          requestAborted.reject(signal.reason);\r\n        },\r\n        { once: true }\r\n      );\r\n      const resolverResult = await until(async () => {\r\n        const listenersFinished = emitAsync(this.emitter, \"request\", {\r\n          request: interactiveRequest,\r\n          requestId\r\n        });\r\n        await Promise.race([\r\n          requestAborted,\r\n          // Put the listeners invocation Promise in the same race condition\r\n          // with the request abort Promise because otherwise awaiting the listeners\r\n          // would always yield some response (or undefined).\r\n          listenersFinished,\r\n          requestController.responsePromise\r\n        ]);\r\n        this.logger.info(\"all request listeners have been resolved!\");\r\n        const mockedResponse2 = await requestController.responsePromise;\r\n        this.logger.info(\"event.respondWith called with:\", mockedResponse2);\r\n        return mockedResponse2;\r\n      });\r\n      if (requestAborted.state === \"rejected\") {\r\n        return Promise.reject(requestAborted.rejectionReason);\r\n      }\r\n      if (resolverResult.error) {\r\n        return Promise.reject(createNetworkError(resolverResult.error));\r\n      }\r\n      const mockedResponse = resolverResult.data;\r\n      if (mockedResponse && !((_a = request.signal) == null ? void 0 : _a.aborted)) {\r\n        this.logger.info(\"received mocked response:\", mockedResponse);\r\n        if (isPropertyAccessible(mockedResponse, \"type\") && mockedResponse.type === \"error\") {\r\n          this.logger.info(\r\n            \"received a network error response, rejecting the request promise...\"\r\n          );\r\n          return Promise.reject(createNetworkError(mockedResponse));\r\n        }\r\n        const responseClone = mockedResponse.clone();\r\n        this.emitter.emit(\"response\", {\r\n          response: responseClone,\r\n          isMockedResponse: true,\r\n          request: interactiveRequest,\r\n          requestId\r\n        });\r\n        const response = new Response(mockedResponse.body, mockedResponse);\r\n        Object.defineProperty(response, \"url\", {\r\n          writable: false,\r\n          enumerable: true,\r\n          configurable: false,\r\n          value: request.url\r\n        });\r\n        return response;\r\n      }\r\n      this.logger.info(\"no mocked response received!\");\r\n      return pureFetch(request).then((response) => {\r\n        const responseClone = response.clone();\r\n        this.logger.info(\"original fetch performed\", responseClone);\r\n        this.emitter.emit(\"response\", {\r\n          response: responseClone,\r\n          isMockedResponse: false,\r\n          request: interactiveRequest,\r\n          requestId\r\n        });\r\n        return response;\r\n      });\r\n    };\r\n    Object.defineProperty(globalThis.fetch, IS_PATCHED_MODULE, {\r\n      enumerable: true,\r\n      configurable: true,\r\n      value: true\r\n    });\r\n    this.subscriptions.push(() => {\r\n      Object.defineProperty(globalThis.fetch, IS_PATCHED_MODULE, {\r\n        value: void 0\r\n      });\r\n      globalThis.fetch = pureFetch;\r\n      this.logger.info(\r\n        'restored native \"globalThis.fetch\"!',\r\n        globalThis.fetch.name\r\n      );\r\n    });\r\n  }\r\n};\r\nvar FetchInterceptor = _FetchInterceptor;\r\nFetchInterceptor.symbol = Symbol(\"fetch\");\r\nfunction createNetworkError(cause) {\r\n  return Object.assign(new TypeError(\"Failed to fetch\"), {\r\n    cause\r\n  });\r\n}\r\n\r\nexport {\r\n  FetchInterceptor\r\n};\r\n", "import {\r\n  decodeBuffer,\r\n  encodeBuffer,\r\n  isResponseWithoutBody,\r\n  toArrayBuffer\r\n} from \"./chunk-3YG2666Q.mjs\";\r\nimport {\r\n  emitAsync,\r\n  toInteractiveRequest,\r\n  uuidv4\r\n} from \"./chunk-KK6APRON.mjs\";\r\nimport {\r\n  IS_PATCHED_MODULE,\r\n  Interceptor\r\n} from \"./chunk-S72SKXXQ.mjs\";\r\n\r\n// src/interceptors/XMLHttpRequest/index.ts\r\nimport { invariant as invariant2 } from \"outvariant\";\r\n\r\n// src/interceptors/XMLHttpRequest/XMLHttpRequestProxy.ts\r\nimport { until } from \"@open-draft/until\";\r\n\r\n// src/interceptors/XMLHttpRequest/XMLHttpRequestController.ts\r\nimport { invariant } from \"outvariant\";\r\nimport { isNodeProcess } from \"is-node-process\";\r\n\r\n// src/interceptors/XMLHttpRequest/utils/concatArrayBuffer.ts\r\nfunction concatArrayBuffer(left, right) {\r\n  const result = new Uint8Array(left.byteLength + right.byteLength);\r\n  result.set(left, 0);\r\n  result.set(right, left.byteLength);\r\n  return result;\r\n}\r\n\r\n// src/interceptors/XMLHttpRequest/polyfills/EventPolyfill.ts\r\nvar EventPolyfill = class {\r\n  constructor(type, options) {\r\n    this.AT_TARGET = 0;\r\n    this.BUBBLING_PHASE = 0;\r\n    this.CAPTURING_PHASE = 0;\r\n    this.NONE = 0;\r\n    this.type = \"\";\r\n    this.srcElement = null;\r\n    this.currentTarget = null;\r\n    this.eventPhase = 0;\r\n    this.isTrusted = true;\r\n    this.composed = false;\r\n    this.cancelable = true;\r\n    this.defaultPrevented = false;\r\n    this.bubbles = true;\r\n    this.lengthComputable = true;\r\n    this.loaded = 0;\r\n    this.total = 0;\r\n    this.cancelBubble = false;\r\n    this.returnValue = true;\r\n    this.type = type;\r\n    this.target = (options == null ? void 0 : options.target) || null;\r\n    this.currentTarget = (options == null ? void 0 : options.currentTarget) || null;\r\n    this.timeStamp = Date.now();\r\n  }\r\n  composedPath() {\r\n    return [];\r\n  }\r\n  initEvent(type, bubbles, cancelable) {\r\n    this.type = type;\r\n    this.bubbles = !!bubbles;\r\n    this.cancelable = !!cancelable;\r\n  }\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n  stopPropagation() {\r\n  }\r\n  stopImmediatePropagation() {\r\n  }\r\n};\r\n\r\n// src/interceptors/XMLHttpRequest/polyfills/ProgressEventPolyfill.ts\r\nvar ProgressEventPolyfill = class extends EventPolyfill {\r\n  constructor(type, init) {\r\n    super(type);\r\n    this.lengthComputable = (init == null ? void 0 : init.lengthComputable) || false;\r\n    this.composed = (init == null ? void 0 : init.composed) || false;\r\n    this.loaded = (init == null ? void 0 : init.loaded) || 0;\r\n    this.total = (init == null ? void 0 : init.total) || 0;\r\n  }\r\n};\r\n\r\n// src/interceptors/XMLHttpRequest/utils/createEvent.ts\r\nvar SUPPORTS_PROGRESS_EVENT = typeof ProgressEvent !== \"undefined\";\r\nfunction createEvent(target, type, init) {\r\n  const progressEvents = [\r\n    \"error\",\r\n    \"progress\",\r\n    \"loadstart\",\r\n    \"loadend\",\r\n    \"load\",\r\n    \"timeout\",\r\n    \"abort\"\r\n  ];\r\n  const ProgressEventClass = SUPPORTS_PROGRESS_EVENT ? ProgressEvent : ProgressEventPolyfill;\r\n  const event = progressEvents.includes(type) ? new ProgressEventClass(type, {\r\n    lengthComputable: true,\r\n    loaded: (init == null ? void 0 : init.loaded) || 0,\r\n    total: (init == null ? void 0 : init.total) || 0\r\n  }) : new EventPolyfill(type, {\r\n    target,\r\n    currentTarget: target\r\n  });\r\n  return event;\r\n}\r\n\r\n// src/utils/findPropertySource.ts\r\nfunction findPropertySource(target, propertyName) {\r\n  if (!(propertyName in target)) {\r\n    return null;\r\n  }\r\n  const hasProperty = Object.prototype.hasOwnProperty.call(target, propertyName);\r\n  if (hasProperty) {\r\n    return target;\r\n  }\r\n  const prototype = Reflect.getPrototypeOf(target);\r\n  return prototype ? findPropertySource(prototype, propertyName) : null;\r\n}\r\n\r\n// src/utils/createProxy.ts\r\nfunction createProxy(target, options) {\r\n  const proxy = new Proxy(target, optionsToProxyHandler(options));\r\n  return proxy;\r\n}\r\nfunction optionsToProxyHandler(options) {\r\n  const { constructorCall, methodCall, getProperty, setProperty } = options;\r\n  const handler = {};\r\n  if (typeof constructorCall !== \"undefined\") {\r\n    handler.construct = function(target, args, newTarget) {\r\n      const next = Reflect.construct.bind(null, target, args, newTarget);\r\n      return constructorCall.call(newTarget, args, next);\r\n    };\r\n  }\r\n  handler.set = function(target, propertyName, nextValue) {\r\n    const next = () => {\r\n      const propertySource = findPropertySource(target, propertyName) || target;\r\n      const ownDescriptors = Reflect.getOwnPropertyDescriptor(\r\n        propertySource,\r\n        propertyName\r\n      );\r\n      if (typeof (ownDescriptors == null ? void 0 : ownDescriptors.set) !== \"undefined\") {\r\n        ownDescriptors.set.apply(target, [nextValue]);\r\n        return true;\r\n      }\r\n      return Reflect.defineProperty(propertySource, propertyName, {\r\n        writable: true,\r\n        enumerable: true,\r\n        configurable: true,\r\n        value: nextValue\r\n      });\r\n    };\r\n    if (typeof setProperty !== \"undefined\") {\r\n      return setProperty.call(target, [propertyName, nextValue], next);\r\n    }\r\n    return next();\r\n  };\r\n  handler.get = function(target, propertyName, receiver) {\r\n    const next = () => target[propertyName];\r\n    const value = typeof getProperty !== \"undefined\" ? getProperty.call(target, [propertyName, receiver], next) : next();\r\n    if (typeof value === \"function\") {\r\n      return (...args) => {\r\n        const next2 = value.bind(target, ...args);\r\n        if (typeof methodCall !== \"undefined\") {\r\n          return methodCall.call(target, [propertyName, args], next2);\r\n        }\r\n        return next2();\r\n      };\r\n    }\r\n    return value;\r\n  };\r\n  return handler;\r\n}\r\n\r\n// src/interceptors/XMLHttpRequest/utils/isDomParserSupportedType.ts\r\nfunction isDomParserSupportedType(type) {\r\n  const supportedTypes = [\r\n    \"application/xhtml+xml\",\r\n    \"application/xml\",\r\n    \"image/svg+xml\",\r\n    \"text/html\",\r\n    \"text/xml\"\r\n  ];\r\n  return supportedTypes.some((supportedType) => {\r\n    return type.startsWith(supportedType);\r\n  });\r\n}\r\n\r\n// src/utils/parseJson.ts\r\nfunction parseJson(data) {\r\n  try {\r\n    const json = JSON.parse(data);\r\n    return json;\r\n  } catch (_) {\r\n    return null;\r\n  }\r\n}\r\n\r\n// src/interceptors/XMLHttpRequest/utils/createResponse.ts\r\nfunction createResponse(request, body) {\r\n  const responseBodyOrNull = isResponseWithoutBody(request.status) ? null : body;\r\n  return new Response(responseBodyOrNull, {\r\n    status: request.status,\r\n    statusText: request.statusText,\r\n    headers: createHeadersFromXMLHttpReqestHeaders(\r\n      request.getAllResponseHeaders()\r\n    )\r\n  });\r\n}\r\nfunction createHeadersFromXMLHttpReqestHeaders(headersString) {\r\n  const headers = new Headers();\r\n  const lines = headersString.split(/[\\r\\n]+/);\r\n  for (const line of lines) {\r\n    if (line.trim() === \"\") {\r\n      continue;\r\n    }\r\n    const [name, ...parts] = line.split(\": \");\r\n    const value = parts.join(\": \");\r\n    headers.append(name, value);\r\n  }\r\n  return headers;\r\n}\r\n\r\n// src/interceptors/XMLHttpRequest/XMLHttpRequestController.ts\r\nvar IS_MOCKED_RESPONSE = Symbol(\"isMockedResponse\");\r\nvar IS_NODE = isNodeProcess();\r\nvar XMLHttpRequestController = class {\r\n  constructor(initialRequest, logger) {\r\n    this.initialRequest = initialRequest;\r\n    this.logger = logger;\r\n    this.method = \"GET\";\r\n    this.url = null;\r\n    this.events = /* @__PURE__ */ new Map();\r\n    this.requestId = uuidv4();\r\n    this.requestHeaders = new Headers();\r\n    this.responseBuffer = new Uint8Array();\r\n    this.request = createProxy(initialRequest, {\r\n      setProperty: ([propertyName, nextValue], invoke) => {\r\n        switch (propertyName) {\r\n          case \"ontimeout\": {\r\n            const eventName = propertyName.slice(\r\n              2\r\n            );\r\n            this.request.addEventListener(eventName, nextValue);\r\n            return invoke();\r\n          }\r\n          default: {\r\n            return invoke();\r\n          }\r\n        }\r\n      },\r\n      methodCall: ([methodName, args], invoke) => {\r\n        var _a;\r\n        switch (methodName) {\r\n          case \"open\": {\r\n            const [method, url] = args;\r\n            if (typeof url === \"undefined\") {\r\n              this.method = \"GET\";\r\n              this.url = toAbsoluteUrl(method);\r\n            } else {\r\n              this.method = method;\r\n              this.url = toAbsoluteUrl(url);\r\n            }\r\n            this.logger = this.logger.extend(`${this.method} ${this.url.href}`);\r\n            this.logger.info(\"open\", this.method, this.url.href);\r\n            return invoke();\r\n          }\r\n          case \"addEventListener\": {\r\n            const [eventName, listener] = args;\r\n            this.registerEvent(eventName, listener);\r\n            this.logger.info(\"addEventListener\", eventName, listener);\r\n            return invoke();\r\n          }\r\n          case \"setRequestHeader\": {\r\n            const [name, value] = args;\r\n            this.requestHeaders.set(name, value);\r\n            this.logger.info(\"setRequestHeader\", name, value);\r\n            return invoke();\r\n          }\r\n          case \"send\": {\r\n            const [body] = args;\r\n            if (body != null) {\r\n              this.requestBody = typeof body === \"string\" ? encodeBuffer(body) : body;\r\n            }\r\n            this.request.addEventListener(\"load\", () => {\r\n              if (typeof this.onResponse !== \"undefined\") {\r\n                const fetchResponse = createResponse(\r\n                  this.request,\r\n                  /**\r\n                   * The `response` property is the right way to read\r\n                   * the ambiguous response body, as the request's \"responseType\" may differ.\r\n                   * @see https://xhr.spec.whatwg.org/#the-response-attribute\r\n                   */\r\n                  this.request.response\r\n                );\r\n                this.onResponse.call(this, {\r\n                  response: fetchResponse,\r\n                  isMockedResponse: IS_MOCKED_RESPONSE in this.request,\r\n                  request: fetchRequest,\r\n                  requestId: this.requestId\r\n                });\r\n              }\r\n            });\r\n            const fetchRequest = this.toFetchApiRequest();\r\n            const onceRequestSettled = ((_a = this.onRequest) == null ? void 0 : _a.call(this, {\r\n              request: fetchRequest,\r\n              requestId: this.requestId\r\n            })) || Promise.resolve();\r\n            onceRequestSettled.finally(() => {\r\n              if (this.request.readyState < this.request.LOADING) {\r\n                this.logger.info(\r\n                  \"request callback settled but request has not been handled (readystate %d), performing as-is...\",\r\n                  this.request.readyState\r\n                );\r\n                if (IS_NODE) {\r\n                  this.request.setRequestHeader(\"X-Request-Id\", this.requestId);\r\n                }\r\n                return invoke();\r\n              }\r\n            });\r\n            break;\r\n          }\r\n          default: {\r\n            return invoke();\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n  registerEvent(eventName, listener) {\r\n    const prevEvents = this.events.get(eventName) || [];\r\n    const nextEvents = prevEvents.concat(listener);\r\n    this.events.set(eventName, nextEvents);\r\n    this.logger.info('registered event \"%s\"', eventName, listener);\r\n  }\r\n  /**\r\n   * Responds to the current request with the given\r\n   * Fetch API `Response` instance.\r\n   */\r\n  respondWith(response) {\r\n    this.logger.info(\r\n      \"responding with a mocked response: %d %s\",\r\n      response.status,\r\n      response.statusText\r\n    );\r\n    define(this.request, IS_MOCKED_RESPONSE, true);\r\n    define(this.request, \"status\", response.status);\r\n    define(this.request, \"statusText\", response.statusText);\r\n    define(this.request, \"responseURL\", this.url.href);\r\n    this.request.getResponseHeader = new Proxy(this.request.getResponseHeader, {\r\n      apply: (_, __, args) => {\r\n        this.logger.info(\"getResponseHeader\", args[0]);\r\n        if (this.request.readyState < this.request.HEADERS_RECEIVED) {\r\n          this.logger.info(\"headers not received yet, returning null\");\r\n          return null;\r\n        }\r\n        const headerValue = response.headers.get(args[0]);\r\n        this.logger.info(\r\n          'resolved response header \"%s\" to',\r\n          args[0],\r\n          headerValue\r\n        );\r\n        return headerValue;\r\n      }\r\n    });\r\n    this.request.getAllResponseHeaders = new Proxy(\r\n      this.request.getAllResponseHeaders,\r\n      {\r\n        apply: () => {\r\n          this.logger.info(\"getAllResponseHeaders\");\r\n          if (this.request.readyState < this.request.HEADERS_RECEIVED) {\r\n            this.logger.info(\"headers not received yet, returning empty string\");\r\n            return \"\";\r\n          }\r\n          const headersList = Array.from(response.headers.entries());\r\n          const allHeaders = headersList.map(([headerName, headerValue]) => {\r\n            return `${headerName}: ${headerValue}`;\r\n          }).join(\"\\r\\n\");\r\n          this.logger.info(\"resolved all response headers to\", allHeaders);\r\n          return allHeaders;\r\n        }\r\n      }\r\n    );\r\n    Object.defineProperties(this.request, {\r\n      response: {\r\n        enumerable: true,\r\n        configurable: false,\r\n        get: () => this.response\r\n      },\r\n      responseText: {\r\n        enumerable: true,\r\n        configurable: false,\r\n        get: () => this.responseText\r\n      },\r\n      responseXML: {\r\n        enumerable: true,\r\n        configurable: false,\r\n        get: () => this.responseXML\r\n      }\r\n    });\r\n    const totalResponseBodyLength = response.headers.has(\"Content-Length\") ? Number(response.headers.get(\"Content-Length\")) : (\r\n      /**\r\n       * @todo Infer the response body length from the response body.\r\n       */\r\n      void 0\r\n    );\r\n    this.logger.info(\"calculated response body length\", totalResponseBodyLength);\r\n    this.trigger(\"loadstart\", {\r\n      loaded: 0,\r\n      total: totalResponseBodyLength\r\n    });\r\n    this.setReadyState(this.request.HEADERS_RECEIVED);\r\n    this.setReadyState(this.request.LOADING);\r\n    const finalizeResponse = () => {\r\n      this.logger.info(\"finalizing the mocked response...\");\r\n      this.setReadyState(this.request.DONE);\r\n      this.trigger(\"load\", {\r\n        loaded: this.responseBuffer.byteLength,\r\n        total: totalResponseBodyLength\r\n      });\r\n      this.trigger(\"loadend\", {\r\n        loaded: this.responseBuffer.byteLength,\r\n        total: totalResponseBodyLength\r\n      });\r\n    };\r\n    if (response.body) {\r\n      this.logger.info(\"mocked response has body, streaming...\");\r\n      const reader = response.body.getReader();\r\n      const readNextResponseBodyChunk = async () => {\r\n        const { value, done } = await reader.read();\r\n        if (done) {\r\n          this.logger.info(\"response body stream done!\");\r\n          finalizeResponse();\r\n          return;\r\n        }\r\n        if (value) {\r\n          this.logger.info(\"read response body chunk:\", value);\r\n          this.responseBuffer = concatArrayBuffer(this.responseBuffer, value);\r\n          this.trigger(\"progress\", {\r\n            loaded: this.responseBuffer.byteLength,\r\n            total: totalResponseBodyLength\r\n          });\r\n        }\r\n        readNextResponseBodyChunk();\r\n      };\r\n      readNextResponseBodyChunk();\r\n    } else {\r\n      finalizeResponse();\r\n    }\r\n  }\r\n  responseBufferToText() {\r\n    return decodeBuffer(this.responseBuffer);\r\n  }\r\n  get response() {\r\n    this.logger.info(\r\n      \"getResponse (responseType: %s)\",\r\n      this.request.responseType\r\n    );\r\n    if (this.request.readyState !== this.request.DONE) {\r\n      return null;\r\n    }\r\n    switch (this.request.responseType) {\r\n      case \"json\": {\r\n        const responseJson = parseJson(this.responseBufferToText());\r\n        this.logger.info(\"resolved response JSON\", responseJson);\r\n        return responseJson;\r\n      }\r\n      case \"arraybuffer\": {\r\n        const arrayBuffer = toArrayBuffer(this.responseBuffer);\r\n        this.logger.info(\"resolved response ArrayBuffer\", arrayBuffer);\r\n        return arrayBuffer;\r\n      }\r\n      case \"blob\": {\r\n        const mimeType = this.request.getResponseHeader(\"Content-Type\") || \"text/plain\";\r\n        const responseBlob = new Blob([this.responseBufferToText()], {\r\n          type: mimeType\r\n        });\r\n        this.logger.info(\r\n          \"resolved response Blob (mime type: %s)\",\r\n          responseBlob,\r\n          mimeType\r\n        );\r\n        return responseBlob;\r\n      }\r\n      default: {\r\n        const responseText = this.responseBufferToText();\r\n        this.logger.info(\r\n          'resolving \"%s\" response type as text',\r\n          this.request.responseType,\r\n          responseText\r\n        );\r\n        return responseText;\r\n      }\r\n    }\r\n  }\r\n  get responseText() {\r\n    invariant(\r\n      this.request.responseType === \"\" || this.request.responseType === \"text\",\r\n      \"InvalidStateError: The object is in invalid state.\"\r\n    );\r\n    if (this.request.readyState !== this.request.LOADING && this.request.readyState !== this.request.DONE) {\r\n      return \"\";\r\n    }\r\n    const responseText = this.responseBufferToText();\r\n    this.logger.info('getResponseText: \"%s\"', responseText);\r\n    return responseText;\r\n  }\r\n  get responseXML() {\r\n    invariant(\r\n      this.request.responseType === \"\" || this.request.responseType === \"document\",\r\n      \"InvalidStateError: The object is in invalid state.\"\r\n    );\r\n    if (this.request.readyState !== this.request.DONE) {\r\n      return null;\r\n    }\r\n    const contentType = this.request.getResponseHeader(\"Content-Type\") || \"\";\r\n    if (typeof DOMParser === \"undefined\") {\r\n      console.warn(\r\n        \"Cannot retrieve XMLHttpRequest response body as XML: DOMParser is not defined. You are likely using an environment that is not browser or does not polyfill browser globals correctly.\"\r\n      );\r\n      return null;\r\n    }\r\n    if (isDomParserSupportedType(contentType)) {\r\n      return new DOMParser().parseFromString(\r\n        this.responseBufferToText(),\r\n        contentType\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n  errorWith(error) {\r\n    this.logger.info(\"responding with an error\");\r\n    this.setReadyState(this.request.DONE);\r\n    this.trigger(\"error\");\r\n    this.trigger(\"loadend\");\r\n  }\r\n  /**\r\n   * Transitions this request's `readyState` to the given one.\r\n   */\r\n  setReadyState(nextReadyState) {\r\n    this.logger.info(\r\n      \"setReadyState: %d -> %d\",\r\n      this.request.readyState,\r\n      nextReadyState\r\n    );\r\n    if (this.request.readyState === nextReadyState) {\r\n      this.logger.info(\"ready state identical, skipping transition...\");\r\n      return;\r\n    }\r\n    define(this.request, \"readyState\", nextReadyState);\r\n    this.logger.info(\"set readyState to: %d\", nextReadyState);\r\n    if (nextReadyState !== this.request.UNSENT) {\r\n      this.logger.info('triggerring \"readystatechange\" event...');\r\n      this.trigger(\"readystatechange\");\r\n    }\r\n  }\r\n  /**\r\n   * Triggers given event on the `XMLHttpRequest` instance.\r\n   */\r\n  trigger(eventName, options) {\r\n    const callback = this.request[`on${eventName}`];\r\n    const event = createEvent(this.request, eventName, options);\r\n    this.logger.info('trigger \"%s\"', eventName, options || \"\");\r\n    if (typeof callback === \"function\") {\r\n      this.logger.info('found a direct \"%s\" callback, calling...', eventName);\r\n      callback.call(this.request, event);\r\n    }\r\n    for (const [registeredEventName, listeners] of this.events) {\r\n      if (registeredEventName === eventName) {\r\n        this.logger.info(\r\n          'found %d listener(s) for \"%s\" event, calling...',\r\n          listeners.length,\r\n          eventName\r\n        );\r\n        listeners.forEach((listener) => listener.call(this.request, event));\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Converts this `XMLHttpRequest` instance into a Fetch API `Request` instance.\r\n   */\r\n  toFetchApiRequest() {\r\n    this.logger.info(\"converting request to a Fetch API Request...\");\r\n    const fetchRequest = new Request(this.url.href, {\r\n      method: this.method,\r\n      headers: this.requestHeaders,\r\n      /**\r\n       * @see https://xhr.spec.whatwg.org/#cross-origin-credentials\r\n       */\r\n      credentials: this.request.withCredentials ? \"include\" : \"same-origin\",\r\n      body: [\"GET\", \"HEAD\"].includes(this.method) ? null : this.requestBody\r\n    });\r\n    const proxyHeaders = createProxy(fetchRequest.headers, {\r\n      methodCall: ([methodName, args], invoke) => {\r\n        switch (methodName) {\r\n          case \"append\":\r\n          case \"set\": {\r\n            const [headerName, headerValue] = args;\r\n            this.request.setRequestHeader(headerName, headerValue);\r\n            break;\r\n          }\r\n          case \"delete\": {\r\n            const [headerName] = args;\r\n            console.warn(\r\n              `XMLHttpRequest: Cannot remove a \"${headerName}\" header from the Fetch API representation of the \"${fetchRequest.method} ${fetchRequest.url}\" request. XMLHttpRequest headers cannot be removed.`\r\n            );\r\n            break;\r\n          }\r\n        }\r\n        return invoke();\r\n      }\r\n    });\r\n    define(fetchRequest, \"headers\", proxyHeaders);\r\n    this.logger.info(\"converted request to a Fetch API Request!\", fetchRequest);\r\n    return fetchRequest;\r\n  }\r\n};\r\nfunction toAbsoluteUrl(url) {\r\n  if (typeof location === \"undefined\") {\r\n    return new URL(url);\r\n  }\r\n  return new URL(url.toString(), location.href);\r\n}\r\nfunction define(target, property, value) {\r\n  Reflect.defineProperty(target, property, {\r\n    // Ensure writable properties to allow redefining readonly properties.\r\n    writable: true,\r\n    enumerable: true,\r\n    value\r\n  });\r\n}\r\n\r\n// src/interceptors/XMLHttpRequest/XMLHttpRequestProxy.ts\r\nfunction createXMLHttpRequestProxy({\r\n  emitter,\r\n  logger\r\n}) {\r\n  const XMLHttpRequestProxy = new Proxy(globalThis.XMLHttpRequest, {\r\n    construct(target, args, newTarget) {\r\n      logger.info(\"constructed new XMLHttpRequest\");\r\n      const originalRequest = Reflect.construct(target, args, newTarget);\r\n      const prototypeDescriptors = Object.getOwnPropertyDescriptors(\r\n        target.prototype\r\n      );\r\n      for (const propertyName in prototypeDescriptors) {\r\n        Reflect.defineProperty(\r\n          originalRequest,\r\n          propertyName,\r\n          prototypeDescriptors[propertyName]\r\n        );\r\n      }\r\n      const xhrRequestController = new XMLHttpRequestController(\r\n        originalRequest,\r\n        logger\r\n      );\r\n      xhrRequestController.onRequest = async function({ request, requestId }) {\r\n        const { interactiveRequest, requestController } = toInteractiveRequest(request);\r\n        this.logger.info(\"awaiting mocked response...\");\r\n        emitter.once(\"request\", ({ requestId: pendingRequestId }) => {\r\n          if (pendingRequestId !== requestId) {\r\n            return;\r\n          }\r\n          if (requestController.responsePromise.state === \"pending\") {\r\n            requestController.respondWith(void 0);\r\n          }\r\n        });\r\n        const resolverResult = await until(async () => {\r\n          this.logger.info(\r\n            'emitting the \"request\" event for %s listener(s)...',\r\n            emitter.listenerCount(\"request\")\r\n          );\r\n          await emitAsync(emitter, \"request\", {\r\n            request: interactiveRequest,\r\n            requestId\r\n          });\r\n          this.logger.info('all \"request\" listeners settled!');\r\n          const mockedResponse2 = await requestController.responsePromise;\r\n          this.logger.info(\"event.respondWith called with:\", mockedResponse2);\r\n          return mockedResponse2;\r\n        });\r\n        if (resolverResult.error) {\r\n          this.logger.info(\r\n            \"request listener threw an exception, aborting request...\",\r\n            resolverResult.error\r\n          );\r\n          xhrRequestController.errorWith(resolverResult.error);\r\n          return;\r\n        }\r\n        const mockedResponse = resolverResult.data;\r\n        if (typeof mockedResponse !== \"undefined\") {\r\n          this.logger.info(\r\n            \"received mocked response: %d %s\",\r\n            mockedResponse.status,\r\n            mockedResponse.statusText\r\n          );\r\n          if (mockedResponse.type === \"error\") {\r\n            this.logger.info(\r\n              \"received a network error response, rejecting the request promise...\"\r\n            );\r\n            xhrRequestController.errorWith(new TypeError(\"Network error\"));\r\n            return;\r\n          }\r\n          return xhrRequestController.respondWith(mockedResponse);\r\n        }\r\n        this.logger.info(\r\n          \"no mocked response received, performing request as-is...\"\r\n        );\r\n      };\r\n      xhrRequestController.onResponse = async function({\r\n        response,\r\n        isMockedResponse,\r\n        request,\r\n        requestId\r\n      }) {\r\n        this.logger.info(\r\n          'emitting the \"response\" event for %s listener(s)...',\r\n          emitter.listenerCount(\"response\")\r\n        );\r\n        emitter.emit(\"response\", {\r\n          response,\r\n          isMockedResponse,\r\n          request,\r\n          requestId\r\n        });\r\n      };\r\n      return xhrRequestController.request;\r\n    }\r\n  });\r\n  return XMLHttpRequestProxy;\r\n}\r\n\r\n// src/interceptors/XMLHttpRequest/index.ts\r\nvar _XMLHttpRequestInterceptor = class extends Interceptor {\r\n  constructor() {\r\n    super(_XMLHttpRequestInterceptor.interceptorSymbol);\r\n  }\r\n  checkEnvironment() {\r\n    return typeof globalThis.XMLHttpRequest !== \"undefined\";\r\n  }\r\n  setup() {\r\n    const logger = this.logger.extend(\"setup\");\r\n    logger.info('patching \"XMLHttpRequest\" module...');\r\n    const PureXMLHttpRequest = globalThis.XMLHttpRequest;\r\n    invariant2(\r\n      !PureXMLHttpRequest[IS_PATCHED_MODULE],\r\n      'Failed to patch the \"XMLHttpRequest\" module: already patched.'\r\n    );\r\n    globalThis.XMLHttpRequest = createXMLHttpRequestProxy({\r\n      emitter: this.emitter,\r\n      logger: this.logger\r\n    });\r\n    logger.info(\r\n      'native \"XMLHttpRequest\" module patched!',\r\n      globalThis.XMLHttpRequest.name\r\n    );\r\n    Object.defineProperty(globalThis.XMLHttpRequest, IS_PATCHED_MODULE, {\r\n      enumerable: true,\r\n      configurable: true,\r\n      value: true\r\n    });\r\n    this.subscriptions.push(() => {\r\n      Object.defineProperty(globalThis.XMLHttpRequest, IS_PATCHED_MODULE, {\r\n        value: void 0\r\n      });\r\n      globalThis.XMLHttpRequest = PureXMLHttpRequest;\r\n      logger.info(\r\n        'native \"XMLHttpRequest\" module restored!',\r\n        globalThis.XMLHttpRequest.name\r\n      );\r\n    });\r\n  }\r\n};\r\nvar XMLHttpRequestInterceptor = _XMLHttpRequestInterceptor;\r\nXMLHttpRequestInterceptor.interceptorSymbol = Symbol(\"xhr\");\r\n\r\nexport {\r\n  XMLHttpRequestInterceptor\r\n};\r\n", "var __defProp = Object.defineProperty;\r\nvar __defProps = Object.defineProperties;\r\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp.call(b, prop))\r\n      __defNormalProp(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols)\r\n    for (var prop of __getOwnPropSymbols(b)) {\r\n      if (__propIsEnum.call(b, prop))\r\n        __defNormalProp(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\r\nvar __async = (__this, __arguments, generator) => {\r\n  return new Promise((resolve, reject) => {\r\n    var fulfilled = (value) => {\r\n      try {\r\n        step(generator.next(value));\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    };\r\n    var rejected = (value) => {\r\n      try {\r\n        step(generator.throw(value));\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    };\r\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\r\n    step((generator = generator.apply(__this, __arguments)).next());\r\n  });\r\n};\r\n\r\n// src/browser/setupWorker/setupWorker.ts\r\nimport { invariant } from \"outvariant\";\r\nimport { isNodeProcess } from \"is-node-process\";\r\n\r\n// src/browser/setupWorker/start/createStartHandler.ts\r\nimport { until as until3 } from \"@open-draft/until\";\r\nimport { devUtils as devUtils6 } from '../core/utils/internal/devUtils.mjs';\r\n\r\n// src/browser/setupWorker/start/utils/getWorkerInstance.ts\r\nimport { until } from \"@open-draft/until\";\r\nimport { devUtils } from '../core/utils/internal/devUtils.mjs';\r\n\r\n// src/browser/utils/getAbsoluteWorkerUrl.ts\r\nfunction getAbsoluteWorkerUrl(workerUrl) {\r\n  return new URL(workerUrl, location.href).href;\r\n}\r\n\r\n// src/browser/setupWorker/start/utils/getWorkerByRegistration.ts\r\nfunction getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker) {\r\n  const allStates = [\r\n    registration.active,\r\n    registration.installing,\r\n    registration.waiting\r\n  ];\r\n  const relevantStates = allStates.filter((state) => {\r\n    return state != null;\r\n  });\r\n  const worker = relevantStates.find((worker2) => {\r\n    return findWorker(worker2.scriptURL, absoluteWorkerUrl);\r\n  });\r\n  return worker || null;\r\n}\r\n\r\n// src/browser/setupWorker/start/utils/getWorkerInstance.ts\r\nvar getWorkerInstance = (_0, ..._1) => __async(void 0, [_0, ..._1], function* (url, options = {}, findWorker) {\r\n  const absoluteWorkerUrl = getAbsoluteWorkerUrl(url);\r\n  const mockRegistrations = yield navigator.serviceWorker.getRegistrations().then(\r\n    (registrations) => registrations.filter(\r\n      (registration) => getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker)\r\n    )\r\n  );\r\n  if (!navigator.serviceWorker.controller && mockRegistrations.length > 0) {\r\n    location.reload();\r\n  }\r\n  const [existingRegistration] = mockRegistrations;\r\n  if (existingRegistration) {\r\n    return existingRegistration.update().then(() => {\r\n      return [\r\n        getWorkerByRegistration(\r\n          existingRegistration,\r\n          absoluteWorkerUrl,\r\n          findWorker\r\n        ),\r\n        existingRegistration\r\n      ];\r\n    });\r\n  }\r\n  const registrationResult = yield until(\r\n    () => __async(void 0, null, function* () {\r\n      const registration = yield navigator.serviceWorker.register(url, options);\r\n      return [\r\n        // Compare existing worker registration by its worker URL,\r\n        // to prevent irrelevant workers to resolve here (such as Codesandbox worker).\r\n        getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker),\r\n        registration\r\n      ];\r\n    })\r\n  );\r\n  if (registrationResult.error) {\r\n    const isWorkerMissing = registrationResult.error.message.includes(\"(404)\");\r\n    if (isWorkerMissing) {\r\n      const scopeUrl = new URL((options == null ? void 0 : options.scope) || \"/\", location.href);\r\n      throw new Error(\r\n        devUtils.formatMessage(`Failed to register a Service Worker for scope ('${scopeUrl.href}') with script ('${absoluteWorkerUrl}'): Service Worker script does not exist at the given path.\r\n\r\nDid you forget to run \"npx msw init <PUBLIC_DIR>\"?\r\n\r\nLearn more about creating the Service Worker script: https://mswjs.io/docs/cli/init`)\r\n      );\r\n    }\r\n    throw new Error(\r\n      devUtils.formatMessage(\r\n        \"Failed to register the Service Worker:\\n\\n%s\",\r\n        registrationResult.error.message\r\n      )\r\n    );\r\n  }\r\n  return registrationResult.data;\r\n});\r\n\r\n// src/browser/setupWorker/start/utils/enableMocking.ts\r\nimport { devUtils as devUtils3 } from '../core/utils/internal/devUtils.mjs';\r\n\r\n// src/browser/setupWorker/start/utils/printStartMessage.ts\r\nimport { devUtils as devUtils2 } from '../core/utils/internal/devUtils.mjs';\r\nfunction printStartMessage(args = {}) {\r\n  if (args.quiet) {\r\n    return;\r\n  }\r\n  const message = args.message || \"Mocking enabled.\";\r\n  console.groupCollapsed(\r\n    `%c${devUtils2.formatMessage(message)}`,\r\n    \"color:orangered;font-weight:bold;\"\r\n  );\r\n  console.log(\r\n    \"%cDocumentation: %chttps://mswjs.io/docs\",\r\n    \"font-weight:bold\",\r\n    \"font-weight:normal\"\r\n  );\r\n  console.log(\"Found an issue? https://github.com/mswjs/msw/issues\");\r\n  if (args.workerUrl) {\r\n    console.log(\"Worker script URL:\", args.workerUrl);\r\n  }\r\n  if (args.workerScope) {\r\n    console.log(\"Worker scope:\", args.workerScope);\r\n  }\r\n  console.groupEnd();\r\n}\r\n\r\n// src/browser/setupWorker/start/utils/enableMocking.ts\r\nfunction enableMocking(context, options) {\r\n  return __async(this, null, function* () {\r\n    var _a, _b;\r\n    context.workerChannel.send(\"MOCK_ACTIVATE\");\r\n    yield context.events.once(\"MOCKING_ENABLED\");\r\n    if (context.isMockingEnabled) {\r\n      devUtils3.warn(\r\n        `Found a redundant \"worker.start()\" call. Note that starting the worker while mocking is already enabled will have no effect. Consider removing this \"worker.start()\" call.`\r\n      );\r\n      return;\r\n    }\r\n    context.isMockingEnabled = true;\r\n    printStartMessage({\r\n      quiet: options.quiet,\r\n      workerScope: (_a = context.registration) == null ? void 0 : _a.scope,\r\n      workerUrl: (_b = context.worker) == null ? void 0 : _b.scriptURL\r\n    });\r\n  });\r\n}\r\n\r\n// src/browser/setupWorker/start/utils/createMessageChannel.ts\r\nvar WorkerChannel = class {\r\n  constructor(port) {\r\n    this.port = port;\r\n  }\r\n  postMessage(event, ...rest) {\r\n    const [data, transfer] = rest;\r\n    this.port.postMessage({ type: event, data }, { transfer });\r\n  }\r\n};\r\n\r\n// src/browser/utils/pruneGetRequestBody.ts\r\nfunction pruneGetRequestBody(request) {\r\n  if ([\"HEAD\", \"GET\"].includes(request.method)) {\r\n    return void 0;\r\n  }\r\n  return request.body;\r\n}\r\n\r\n// src/browser/utils/parseWorkerRequest.ts\r\nfunction parseWorkerRequest(incomingRequest) {\r\n  return new Request(incomingRequest.url, __spreadProps(__spreadValues({}, incomingRequest), {\r\n    body: pruneGetRequestBody(incomingRequest)\r\n  }));\r\n}\r\n\r\n// src/browser/setupWorker/start/createRequestListener.ts\r\nimport { handleRequest } from '../core/utils/handleRequest.mjs';\r\nimport { devUtils as devUtils4 } from '../core/utils/internal/devUtils.mjs';\r\nimport { toResponseInit } from '../core/utils/toResponseInit.mjs';\r\nvar createRequestListener = (context, options) => {\r\n  return (event, message) => __async(void 0, null, function* () {\r\n    var _b;\r\n    const messageChannel = new WorkerChannel(event.ports[0]);\r\n    const requestId = message.payload.id;\r\n    const request = parseWorkerRequest(message.payload);\r\n    const requestCloneForLogs = request.clone();\r\n    try {\r\n      let _a;\r\n      yield handleRequest(\r\n        request,\r\n        requestId,\r\n        context.requestHandlers,\r\n        options,\r\n        context.emitter,\r\n        {\r\n          onPassthroughResponse() {\r\n            messageChannel.postMessage(\"NOT_FOUND\");\r\n          },\r\n          onMockedResponse(_0, _1) {\r\n            return __async(this, arguments, function* (response, { handler, parsedResult }) {\r\n              const responseClone = response.clone();\r\n              const responseCloneForLogs = response.clone();\r\n              const responseInit = toResponseInit(response);\r\n              if (context.supports.readableStreamTransfer) {\r\n                const responseStreamOrNull = response.body;\r\n                messageChannel.postMessage(\r\n                  \"MOCK_RESPONSE\",\r\n                  __spreadProps(__spreadValues({}, responseInit), {\r\n                    body: responseStreamOrNull\r\n                  }),\r\n                  responseStreamOrNull ? [responseStreamOrNull] : void 0\r\n                );\r\n              } else {\r\n                const responseBufferOrNull = response.body === null ? null : yield responseClone.arrayBuffer();\r\n                messageChannel.postMessage(\"MOCK_RESPONSE\", __spreadProps(__spreadValues({}, responseInit), {\r\n                  body: responseBufferOrNull\r\n                }));\r\n              }\r\n              if (!options.quiet) {\r\n                context.emitter.once(\"response:mocked\", () => {\r\n                  handler.log({\r\n                    request: requestCloneForLogs,\r\n                    response: responseCloneForLogs,\r\n                    parsedResult\r\n                  });\r\n                });\r\n              }\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        devUtils4.error(\r\n          `Uncaught exception in the request handler for \"%s %s\":\r\n\r\n%s\r\n\r\nThis exception has been gracefully handled as a 500 response, however, it's strongly recommended to resolve this error, as it indicates a mistake in your code. If you wish to mock an error response, please see this guide: https://mswjs.io/docs/recipes/mocking-error-responses`,\r\n          request.method,\r\n          request.url,\r\n          (_b = error.stack) != null ? _b : error\r\n        );\r\n        messageChannel.postMessage(\"MOCK_RESPONSE\", {\r\n          status: 500,\r\n          statusText: \"Request Handler Error\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify({\r\n            name: error.name,\r\n            message: error.message,\r\n            stack: error.stack\r\n          })\r\n        });\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n// src/browser/utils/requestIntegrityCheck.ts\r\nfunction requestIntegrityCheck(context, serviceWorker) {\r\n  return __async(this, null, function* () {\r\n    context.workerChannel.send(\"INTEGRITY_CHECK_REQUEST\");\r\n    const { payload: actualChecksum } = yield context.events.once(\r\n      \"INTEGRITY_CHECK_RESPONSE\"\r\n    );\r\n    if (actualChecksum !== \"c5f7f8e188b673ea4e677df7ea3c5a39\") {\r\n      throw new Error(\r\n        `Currently active Service Worker (${actualChecksum}) is behind the latest published one (${\"c5f7f8e188b673ea4e677df7ea3c5a39\"}).`\r\n      );\r\n    }\r\n    return serviceWorker;\r\n  });\r\n}\r\n\r\n// src/browser/utils/deferNetworkRequestsUntil.ts\r\nimport { until as until2 } from \"@open-draft/until\";\r\nfunction deferNetworkRequestsUntil(predicatePromise) {\r\n  const originalXhrSend = window.XMLHttpRequest.prototype.send;\r\n  window.XMLHttpRequest.prototype.send = function(...args) {\r\n    until2(() => predicatePromise).then(() => {\r\n      window.XMLHttpRequest.prototype.send = originalXhrSend;\r\n      this.send(...args);\r\n    });\r\n  };\r\n  const originalFetch = window.fetch;\r\n  window.fetch = (...args) => __async(this, null, function* () {\r\n    yield until2(() => predicatePromise);\r\n    window.fetch = originalFetch;\r\n    return window.fetch(...args);\r\n  });\r\n}\r\n\r\n// src/browser/setupWorker/start/createResponseListener.ts\r\nimport { isResponseWithoutBody } from \"@mswjs/interceptors\";\r\nfunction createResponseListener(context) {\r\n  return (_, message) => {\r\n    var _a;\r\n    const { payload: responseJson } = message;\r\n    if ((_a = responseJson.type) == null ? void 0 : _a.includes(\"opaque\")) {\r\n      return;\r\n    }\r\n    const response = responseJson.status === 0 ? Response.error() : new Response(\r\n      /**\r\n       * Responses may be streams here, but when we create a response object\r\n       * with null-body status codes, like 204, 205, 304 Response will\r\n       * throw when passed a non-null body, so ensure it's null here\r\n       * for those codes\r\n       */\r\n      isResponseWithoutBody(responseJson.status) ? null : responseJson.body,\r\n      responseJson\r\n    );\r\n    context.emitter.emit(\r\n      responseJson.isMockedResponse ? \"response:mocked\" : \"response:bypass\",\r\n      {\r\n        response,\r\n        /**\r\n         * @todo @fixme In this context, we don't know anything about\r\n         * the request.\r\n         */\r\n        request: null,\r\n        requestId: responseJson.requestId\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\n// src/browser/setupWorker/start/utils/validateWorkerScope.ts\r\nimport { devUtils as devUtils5 } from '../core/utils/internal/devUtils.mjs';\r\nfunction validateWorkerScope(registration, options) {\r\n  if (!(options == null ? void 0 : options.quiet) && !location.href.startsWith(registration.scope)) {\r\n    devUtils5.warn(\r\n      `Cannot intercept requests on this page because it's outside of the worker's scope (\"${registration.scope}\"). If you wish to mock API requests on this page, you must resolve this scope issue.\r\n\r\n- (Recommended) Register the worker at the root level (\"/\") of your application.\r\n- Set the \"Service-Worker-Allowed\" response header to allow out-of-scope workers.`\r\n    );\r\n  }\r\n}\r\n\r\n// src/browser/setupWorker/start/createStartHandler.ts\r\nvar createStartHandler = (context) => {\r\n  return function start(options, customOptions) {\r\n    const startWorkerInstance = () => __async(this, null, function* () {\r\n      context.events.removeAllListeners();\r\n      context.workerChannel.on(\r\n        \"REQUEST\",\r\n        createRequestListener(context, options)\r\n      );\r\n      context.workerChannel.on(\"RESPONSE\", createResponseListener(context));\r\n      const instance = yield getWorkerInstance(\r\n        options.serviceWorker.url,\r\n        options.serviceWorker.options,\r\n        options.findWorker\r\n      );\r\n      const [worker, registration] = instance;\r\n      if (!worker) {\r\n        const missingWorkerMessage = (customOptions == null ? void 0 : customOptions.findWorker) ? devUtils6.formatMessage(\r\n          `Failed to locate the Service Worker registration using a custom \"findWorker\" predicate.\r\n\r\nPlease ensure that the custom predicate properly locates the Service Worker registration at \"%s\".\r\nMore details: https://mswjs.io/docs/api/setup-worker/start#findworker\r\n`,\r\n          options.serviceWorker.url\r\n        ) : devUtils6.formatMessage(\r\n          `Failed to locate the Service Worker registration.\r\n\r\nThis most likely means that the worker script URL \"%s\" cannot resolve against the actual public hostname (%s). This may happen if your application runs behind a proxy, or has a dynamic hostname.\r\n\r\nPlease consider using a custom \"serviceWorker.url\" option to point to the actual worker script location, or a custom \"findWorker\" option to resolve the Service Worker registration manually. More details: https://mswjs.io/docs/api/setup-worker/start`,\r\n          options.serviceWorker.url,\r\n          location.host\r\n        );\r\n        throw new Error(missingWorkerMessage);\r\n      }\r\n      context.worker = worker;\r\n      context.registration = registration;\r\n      context.events.addListener(window, \"beforeunload\", () => {\r\n        if (worker.state !== \"redundant\") {\r\n          context.workerChannel.send(\"CLIENT_CLOSED\");\r\n        }\r\n        window.clearInterval(context.keepAliveInterval);\r\n      });\r\n      const integrityCheckResult = yield until3(\r\n        () => requestIntegrityCheck(context, worker)\r\n      );\r\n      if (integrityCheckResult.error) {\r\n        devUtils6.error(`Detected outdated Service Worker: ${integrityCheckResult.error.message}\r\n\r\nThe mocking is still enabled, but it's highly recommended that you update your Service Worker by running:\r\n\r\n$ npx msw init <PUBLIC_DIR>\r\n\r\nThis is necessary to ensure that the Service Worker is in sync with the library to guarantee its stability.\r\nIf this message still persists after updating, please report an issue: https://github.com/open-draft/msw/issues      `);\r\n      }\r\n      context.keepAliveInterval = window.setInterval(\r\n        () => context.workerChannel.send(\"KEEPALIVE_REQUEST\"),\r\n        5e3\r\n      );\r\n      validateWorkerScope(registration, context.startOptions);\r\n      return registration;\r\n    });\r\n    const workerRegistration = startWorkerInstance().then(\r\n      (registration) => __async(this, null, function* () {\r\n        const pendingInstance = registration.installing || registration.waiting;\r\n        if (pendingInstance) {\r\n          yield new Promise((resolve) => {\r\n            pendingInstance.addEventListener(\"statechange\", () => {\r\n              if (pendingInstance.state === \"activated\") {\r\n                return resolve();\r\n              }\r\n            });\r\n          });\r\n        }\r\n        yield enableMocking(context, options).catch((error) => {\r\n          throw new Error(`Failed to enable mocking: ${error == null ? void 0 : error.message}`);\r\n        });\r\n        return registration;\r\n      })\r\n    );\r\n    if (options.waitUntilReady) {\r\n      deferNetworkRequestsUntil(workerRegistration);\r\n    }\r\n    return workerRegistration;\r\n  };\r\n};\r\n\r\n// src/browser/setupWorker/stop/createStop.ts\r\nimport { devUtils as devUtils8 } from '../core/utils/internal/devUtils.mjs';\r\n\r\n// src/browser/setupWorker/stop/utils/printStopMessage.ts\r\nimport { devUtils as devUtils7 } from '../core/utils/internal/devUtils.mjs';\r\nfunction printStopMessage(args = {}) {\r\n  if (args.quiet) {\r\n    return;\r\n  }\r\n  console.log(\r\n    `%c${devUtils7.formatMessage(\"Mocking disabled.\")}`,\r\n    \"color:orangered;font-weight:bold;\"\r\n  );\r\n}\r\n\r\n// src/browser/setupWorker/stop/createStop.ts\r\nvar createStop = (context) => {\r\n  return function stop() {\r\n    var _a;\r\n    if (!context.isMockingEnabled) {\r\n      devUtils8.warn(\r\n        'Found a redundant \"worker.stop()\" call. Note that stopping the worker while mocking already stopped has no effect. Consider removing this \"worker.stop()\" call.'\r\n      );\r\n      return;\r\n    }\r\n    context.workerChannel.send(\"MOCK_DEACTIVATE\");\r\n    context.isMockingEnabled = false;\r\n    window.clearInterval(context.keepAliveInterval);\r\n    printStopMessage({ quiet: (_a = context.startOptions) == null ? void 0 : _a.quiet });\r\n  };\r\n};\r\n\r\n// src/browser/setupWorker/start/utils/prepareStartHandler.ts\r\nimport { mergeRight } from '../core/utils/internal/mergeRight.mjs';\r\nvar DEFAULT_START_OPTIONS = {\r\n  serviceWorker: {\r\n    url: \"/mockServiceWorker.js\",\r\n    options: null\r\n  },\r\n  quiet: false,\r\n  waitUntilReady: true,\r\n  onUnhandledRequest: \"warn\",\r\n  findWorker(scriptURL, mockServiceWorkerUrl) {\r\n    return scriptURL === mockServiceWorkerUrl;\r\n  }\r\n};\r\n\r\n// src/browser/setupWorker/start/createFallbackRequestListener.ts\r\nimport {\r\n  BatchInterceptor\r\n} from \"@mswjs/interceptors\";\r\nimport { FetchInterceptor } from \"@mswjs/interceptors/fetch\";\r\nimport { XMLHttpRequestInterceptor } from \"@mswjs/interceptors/XMLHttpRequest\";\r\nimport { handleRequest as handleRequest2 } from '../core/utils/handleRequest.mjs';\r\nfunction createFallbackRequestListener(context, options) {\r\n  const interceptor = new BatchInterceptor({\r\n    name: \"fallback\",\r\n    interceptors: [new FetchInterceptor(), new XMLHttpRequestInterceptor()]\r\n  });\r\n  interceptor.on(\"request\", (_0) => __async(this, [_0], function* ({ request, requestId }) {\r\n    const requestCloneForLogs = request.clone();\r\n    const response = yield handleRequest2(\r\n      request,\r\n      requestId,\r\n      context.requestHandlers,\r\n      options,\r\n      context.emitter,\r\n      {\r\n        onMockedResponse(_, { handler, parsedResult }) {\r\n          if (!options.quiet) {\r\n            context.emitter.once(\"response:mocked\", ({ response: response2 }) => {\r\n              handler.log({\r\n                request: requestCloneForLogs,\r\n                response: response2,\r\n                parsedResult\r\n              });\r\n            });\r\n          }\r\n        }\r\n      }\r\n    );\r\n    if (response) {\r\n      request.respondWith(response);\r\n    }\r\n  }));\r\n  interceptor.on(\r\n    \"response\",\r\n    ({ response, isMockedResponse, request, requestId }) => {\r\n      context.emitter.emit(\r\n        isMockedResponse ? \"response:mocked\" : \"response:bypass\",\r\n        {\r\n          response,\r\n          request,\r\n          requestId\r\n        }\r\n      );\r\n    }\r\n  );\r\n  interceptor.apply();\r\n  return interceptor;\r\n}\r\n\r\n// src/browser/setupWorker/start/createFallbackStart.ts\r\nfunction createFallbackStart(context) {\r\n  return function start(options) {\r\n    return __async(this, null, function* () {\r\n      context.fallbackInterceptor = createFallbackRequestListener(\r\n        context,\r\n        options\r\n      );\r\n      printStartMessage({\r\n        message: \"Mocking enabled (fallback mode).\",\r\n        quiet: options.quiet\r\n      });\r\n      return void 0;\r\n    });\r\n  };\r\n}\r\n\r\n// src/browser/setupWorker/stop/createFallbackStop.ts\r\nfunction createFallbackStop(context) {\r\n  return function stop() {\r\n    var _a, _b;\r\n    (_a = context.fallbackInterceptor) == null ? void 0 : _a.dispose();\r\n    printStopMessage({ quiet: (_b = context.startOptions) == null ? void 0 : _b.quiet });\r\n  };\r\n}\r\n\r\n// src/browser/setupWorker/setupWorker.ts\r\nimport { devUtils as devUtils9 } from '../core/utils/internal/devUtils.mjs';\r\nimport { SetupApi } from '../core/SetupApi.mjs';\r\nimport { mergeRight as mergeRight2 } from '../core/utils/internal/mergeRight.mjs';\r\n\r\n// src/browser/utils/supportsReadableStreamTransfer.ts\r\nfunction supportsReadableStreamTransfer() {\r\n  try {\r\n    const stream = new ReadableStream({\r\n      start: (controller) => controller.close()\r\n    });\r\n    const message = new MessageChannel();\r\n    message.port1.postMessage(stream, [stream]);\r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n// src/browser/setupWorker/setupWorker.ts\r\nvar SetupWorkerApi = class extends SetupApi {\r\n  constructor(...handlers) {\r\n    super(...handlers);\r\n    this.startHandler = null;\r\n    this.stopHandler = null;\r\n    invariant(\r\n      !isNodeProcess(),\r\n      devUtils9.formatMessage(\r\n        \"Failed to execute `setupWorker` in a non-browser environment. Consider using `setupServer` for Node.js environment instead.\"\r\n      )\r\n    );\r\n    this.listeners = [];\r\n    this.context = this.createWorkerContext();\r\n  }\r\n  createWorkerContext() {\r\n    const context = {\r\n      // Mocking is not considered enabled until the worker\r\n      // signals back the successful activation event.\r\n      isMockingEnabled: false,\r\n      startOptions: null,\r\n      worker: null,\r\n      registration: null,\r\n      requestHandlers: this.currentHandlers,\r\n      emitter: this.emitter,\r\n      workerChannel: {\r\n        on: (eventType, callback) => {\r\n          this.context.events.addListener(navigator.serviceWorker, \"message\", (event) => {\r\n            if (event.source !== this.context.worker) {\r\n              return;\r\n            }\r\n            const message = event.data;\r\n            if (!message) {\r\n              return;\r\n            }\r\n            if (message.type === eventType) {\r\n              callback(event, message);\r\n            }\r\n          });\r\n        },\r\n        send: (type) => {\r\n          var _a;\r\n          (_a = this.context.worker) == null ? void 0 : _a.postMessage(type);\r\n        }\r\n      },\r\n      events: {\r\n        addListener: (target, eventType, callback) => {\r\n          target.addEventListener(eventType, callback);\r\n          this.listeners.push({\r\n            eventType,\r\n            target,\r\n            callback\r\n          });\r\n          return () => {\r\n            target.removeEventListener(eventType, callback);\r\n          };\r\n        },\r\n        removeAllListeners: () => {\r\n          for (const { target, eventType, callback } of this.listeners) {\r\n            target.removeEventListener(eventType, callback);\r\n          }\r\n          this.listeners = [];\r\n        },\r\n        once: (eventType) => {\r\n          const bindings = [];\r\n          return new Promise((resolve, reject) => {\r\n            const handleIncomingMessage = (event) => {\r\n              try {\r\n                const message = event.data;\r\n                if (message.type === eventType) {\r\n                  resolve(message);\r\n                }\r\n              } catch (error) {\r\n                reject(error);\r\n              }\r\n            };\r\n            bindings.push(\r\n              this.context.events.addListener(\r\n                navigator.serviceWorker,\r\n                \"message\",\r\n                handleIncomingMessage\r\n              ),\r\n              this.context.events.addListener(\r\n                navigator.serviceWorker,\r\n                \"messageerror\",\r\n                reject\r\n              )\r\n            );\r\n          }).finally(() => {\r\n            bindings.forEach((unbind) => unbind());\r\n          });\r\n        }\r\n      },\r\n      supports: {\r\n        serviceWorkerApi: !(\"serviceWorker\" in navigator) || location.protocol === \"file:\",\r\n        readableStreamTransfer: supportsReadableStreamTransfer()\r\n      }\r\n    };\r\n    Object.defineProperties(context, {\r\n      requestHandlers: {\r\n        get: () => this.currentHandlers\r\n      }\r\n    });\r\n    this.startHandler = context.supports.serviceWorkerApi ? createFallbackStart(context) : createStartHandler(context);\r\n    this.stopHandler = context.supports.serviceWorkerApi ? createFallbackStop(context) : createStop(context);\r\n    return context;\r\n  }\r\n  start() {\r\n    return __async(this, arguments, function* (options = {}) {\r\n      this.context.startOptions = mergeRight2(\r\n        DEFAULT_START_OPTIONS,\r\n        options\r\n      );\r\n      return yield this.startHandler(this.context.startOptions, options);\r\n    });\r\n  }\r\n  stop() {\r\n    super.dispose();\r\n    this.context.events.removeAllListeners();\r\n    this.context.emitter.removeAllListeners();\r\n    this.stopHandler();\r\n  }\r\n};\r\nfunction setupWorker(...handlers) {\r\n  return new SetupWorkerApi(...handlers);\r\n}\r\nexport {\r\n  SetupWorkerApi,\r\n  setupWorker\r\n};\r\n"],
  "mappings": "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",
  "names": ["__async"]
}
